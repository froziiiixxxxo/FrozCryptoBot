import telebot
from telebot import types
import requests

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7587256412:AAGjo6mYs4pZuyuF-4zJQLk3ZNtCYQyOSDc'

bot = telebot.TeleBot(TOKEN)

# –°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å –∏—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –Ω–∞ CoinGecko
cryptos = {
    'Bitcoin': 'bitcoin',
    'Ethereum': 'ethereum',
    'Dogecoin': 'dogecoin',
    'TRON': 'tron',
    'Notcoin': 'notcoin',
    'Tether': 'tether',
    'Pepe': 'pepe',
    'Litecoin': 'litecoin',
    'Ripple': 'ripple'
}

help = """–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ - @frozziiii_bot
–°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º - @frozziiii_bot"""

commands = """/commands - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥‚úè
/rate - –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
/help - –ø–æ–º–æ—â—å"""


#–°–¢–ê–†–¢
@bot.message_handler(commands=['start'])
def handle_start(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å', callback_data='rate')
    btn2 = types.InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')
    markup.add(btn1, btn2)

    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Çüí∏",
                 reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    if call.message:
        if call.data == 'rate':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å"
            try:
                ids = ','.join(cryptos.values())
                url = 'https://api.coingecko.com/api/v3/simple/price'
                params = {
                    'ids': ids,
                    'vs_currencies': 'usd,rub'
                }
                response = requests.get(url, params=params)
                data = response.json()

                message_lines = []
                for name, id in cryptos.items():
                    price_info = data.get(id)
                    if price_info:
                        usd_price = price_info.get('usd', 'N/A')
                        rub_price = price_info.get('rub', 'N/A')
                        message_lines.append(f"{name}:  ${usd_price}  /  ‚ÇΩ{rub_price}")
                    else:
                        message_lines.append(f"{name}: –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                    # –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏
                    message_lines.append('')
                reply_text = "\n".join(message_lines)
                bot.send_message(call.message.chat.id, reply_text)
            except Exception as e:
                bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        elif call.data == 'help':
            bot.send_message(call.message.chat.id, help)
        else:
            bot.send_message(call.message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


#–°–¢–û–ò–ú–û–°–¢–¨
@bot.message_handler(commands=['rate'])
def handle_course(message):
    try:
        ids = ','.join(cryptos.values())
        url = 'https://api.coingecko.com/api/v3/simple/price'
        params = {
            'ids': ids,
            'vs_currencies': 'usd,rub'
        }
        response = requests.get(url, params=params)
        data = response.json()

        message_lines = []
        for name, id in cryptos.items():
            price_info = data.get(id)
            if price_info:
                usd_price = price_info.get('usd', 'N/A')
                rub_price = price_info.get('rub', 'N/A')
                message_lines.append(f"{name}:  ${usd_price}  /  ‚ÇΩ{rub_price}")
            else:
                message_lines.append(f"{name}: –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                #–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏
            message_lines.append('')

        reply_text = "\n".join(message_lines)
        bot.reply_to(message, reply_text)
    except Exception as e:
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


#–ü–û–ú–û–©–¨
@bot.message_handler(commands=['help'])
def handle_help(message):
    bot.reply_to(message, help)


#–ö–û–ú–ê–ù–î–´
@bot.message_handler(commands=['commands'])
def handle_help(message):
    bot.reply_to(message, commands)


if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    bot.polling()